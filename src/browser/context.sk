namespace Browser {
  class Viewport {
    const x int
    const y int
    const width int
    const height int

    def equals(other Viewport) bool {
      return
        x == other.x &&
        y == other.y &&
        width == other.width &&
        height == other.height
    }
  }

  namespace Viewport {
    const EMPTY = new(0, 0, 0, 0)
  }

  class Context :: Graphics.Context {
    var _attributeCount = 0
    var _blendOperationMap IntMap<GLenum> = null
    var _blendOperations = 0
    var _comparisonMap IntMap<GLenum> = null
    var _contextResetHandlers List<fn()> = []
    var _currentClearColor Graphics.RGBA = .TRANSPARENT
    var _currentRenderTarget RenderTarget = null
    var _defaultViewport Viewport = .EMPTY
    var _forceStateUpdate = true
    var _generation = 1
    var _gl WebGLRenderingContext = null
    var _height = 0
    var _oldBlendOperations = 0
    var _oldRenderTarget RenderTarget = null
    var _oldViewport Viewport = .EMPTY
    var _operationMap IntMap<GLenum> = null
    var _width = 0

    def width int {
      return _width
    }

    def height int {
      return _height
    }

    def new(gl WebGLRenderingContext) {
      _gl = gl
      var canvas = _gl.canvas
      var style = canvas.style
      canvas.width = 0
      canvas.height = 0
      style.width = style.height = "0"

      canvas.addEventListener("webglcontextlost", e => {
        e.preventDefault()
      })

      canvas.addEventListener("webglcontextrestored", => {
        _attributeCount = 0
        _currentClearColor = .TRANSPARENT
        _forceStateUpdate = true
        _generation++
        for handler in _contextResetHandlers {
          handler()
        }
      })

      # Using maps makes these compact in release
      _blendOperationMap = {
        Graphics.BlendOperation.ZERO: _gl.ZERO,
        Graphics.BlendOperation.ONE: _gl.ONE,

        Graphics.BlendOperation.SOURCE_COLOR: _gl.SRC_COLOR,
        Graphics.BlendOperation.TARGET_COLOR: _gl.DST_COLOR,
        Graphics.BlendOperation.INVERSE_SOURCE_COLOR: _gl.ONE_MINUS_SRC_COLOR,
        Graphics.BlendOperation.INVERSE_TARGET_COLOR: _gl.ONE_MINUS_DST_COLOR,

        Graphics.BlendOperation.SOURCE_ALPHA: _gl.SRC_ALPHA,
        Graphics.BlendOperation.TARGET_ALPHA: _gl.DST_ALPHA,
        Graphics.BlendOperation.INVERSE_SOURCE_ALPHA: _gl.ONE_MINUS_SRC_ALPHA,
        Graphics.BlendOperation.INVERSE_TARGET_ALPHA: _gl.ONE_MINUS_DST_ALPHA,

        Graphics.BlendOperation.CONSTANT: _gl.CONSTANT_COLOR,
        Graphics.BlendOperation.INVERSE_CONSTANT: _gl.ONE_MINUS_CONSTANT_COLOR,
      }
    }

    def gl WebGLRenderingContext {
      return _gl
    }

    def generation int {
      return _generation
    }

    def addContextResetHandler(callback fn()) {
      _contextResetHandlers.appendOne(callback)
    }

    def removeContextResetHandler(callback fn()) {
      _contextResetHandlers.removeOne(callback)
    }

    def currentRenderTarget Graphics.RenderTarget {
      return _currentRenderTarget
    }

    def beginFrame {
      setRenderTarget(null)
    }

    def endFrame {
    }

    def setBlendState(source Graphics.BlendOperation, target Graphics.BlendOperation) {
      _blendOperations = _packBlendModes(source, target)
    }

    def setViewport(x int, y int, width int, height int) {
      var viewport = Viewport.new(x, y, width, height)
      if _currentRenderTarget != null {
        _currentRenderTarget.viewport = viewport
      } else {
        _defaultViewport = viewport
      }
    }

    def draw(primitive Graphics.Primitive, material Graphics.Material, area Graphics.BufferArea) {
      if area == null {
        return
      }

      assert(area.stride == material.format.stride)

      # Update the texture set before preparing the material so uniform samplers can check for that they use different textures
      _updateRenderTargetAndViewport
      Material.from(material).prepare

      # Update the vertex buffer before updating the format so attributes can bind correctly
      VertexBuffer.from(area.buffer).prepare
      _updateFormat(material.format)

      # Draw now that everything is ready
      _updateBlendState
      _gl.drawArrays(primitive == .TRIANGLES ? _gl.TRIANGLES : _gl.TRIANGLE_STRIP, area.byteOffset / area.stride, area.byteCount / area.stride)

      # Forced state updates are done once after a context loss
      _forceStateUpdate = false
    }

    def resize(width int, height int) {
      assert(_gl.canvas.width == width)
      assert(_gl.canvas.height == height)
      setViewport(0, 0, width, height)
      _width = width
      _height = height
    }

    def clear(color Graphics.RGBA) {
      _updateRenderTargetAndViewport
      _updateBlendState

      if color != _currentClearColor {
        _gl.clearColor(color.red / 255.0, color.green / 255.0, color.blue / 255.0, color.alpha / 255.0)
        _currentClearColor = color
      }

      _gl.clear(_gl.COLOR_BUFFER_BIT)
    }

    def setRenderTarget(renderTarget Graphics.RenderTarget) {
      _currentRenderTarget = RenderTarget.from(renderTarget)
    }

    def createMaterial(format Graphics.VertexFormat, vertexSource string, fragmentSource string) Graphics.Material {
      var material = Material.new(self, format, vertexSource, fragmentSource)

      # Compiling shaders is really expensive so we want to get that started
      # as early as possible. In Chrome and possibly other browsers, shader
      # compilation can happen asynchronously as long as you don't call
      # useProgram().
      #
      #   https://plus.google.com/+BrandonJonesToji/posts/4ERHkicC5Ny
      #
      material.program

      return material
    }

    def createVertexBuffer(byteCount int) Graphics.VertexBuffer {
      assert(byteCount > 0 && byteCount % 4 == 0)
      return VertexBuffer.new(self, byteCount)
    }

    def createTexture(format Graphics.TextureFormat, width int, height int, pixels Graphics.FixedArray) Graphics.Texture {
      return Texture.new(self, format, width, height, pixels as Uint8Array)
    }

    def createRenderTarget(texture Graphics.Texture) Graphics.RenderTarget {
      return RenderTarget.new(self, Texture.from(texture))
    }

    def _updateRenderTargetAndViewport {
      var renderTarget = _currentRenderTarget
      var viewport = renderTarget != null ? renderTarget.viewport : _defaultViewport
      var gl = _gl

      if _forceStateUpdate || _oldRenderTarget != renderTarget {
        gl.bindFramebuffer(gl.FRAMEBUFFER, renderTarget?.framebuffer)
        _oldRenderTarget = renderTarget
      }

      if _forceStateUpdate || !_oldViewport.equals(viewport) {
        gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height)
        _oldViewport = viewport
      }
    }

    def _updateBlendState {
      if _forceStateUpdate || _oldBlendOperations != _blendOperations {
        var gl = _gl
        var operations = _blendOperations
        var oldOperations = _oldBlendOperations
        var source = (operations & 0xF) as Graphics.BlendOperation
        var target = (operations >> 4) as Graphics.BlendOperation

        assert(source in _blendOperationMap)
        assert(target in _blendOperationMap)

        # Special-case the blend mode that just writes over the target buffer
        if operations == COPY_BLEND_OPERATIONS {
          gl.disable(gl.BLEND)
        } else {
          if _forceStateUpdate || oldOperations == COPY_BLEND_OPERATIONS {
            gl.enable(gl.BLEND)
          }

          # Otherwise, use actual blending
          gl.blendFunc(_blendOperationMap[source], _blendOperationMap[target])
        }

        _oldBlendOperations = operations
      }
    }

    def _updateFormat(format Graphics.VertexFormat) {
      # Update the attributes
      var gl = _gl
      var attributes = format.attributes
      var count = attributes.count
      for i in 0..count {
        var attribute = attributes[i]
        var isByte = attribute.type == .BYTE
        gl.vertexAttribPointer(i, attribute.count, isByte ? gl.UNSIGNED_BYTE : gl.FLOAT, isByte, format.stride, attribute.byteOffset)
      }

      # Update the attribute count
      while _attributeCount < count {
        gl.enableVertexAttribArray(_attributeCount)
        _attributeCount++
      }
      while _attributeCount > count {
        _attributeCount--
        gl.disableVertexAttribArray(_attributeCount)
      }
      _attributeCount = count
    }
  }

  namespace Context {
    const COPY_BLEND_OPERATIONS = _packBlendModes(.ONE, .ZERO)

    def from(context Graphics.Context) Context {
      assert(context == null || context is Context)
      return context as Context
    }

    def _packBlendModes(source Graphics.BlendOperation, target Graphics.BlendOperation) int {
      return source | target << 4
    }
  }

  class Uniform {
    const _material Material
    const _name string
    var _generation = 0
    var _location WebGLUniformLocation = null
    var _isDirty = true

    # Upload this uniform if it's dirty
    def prepare

    def location WebGLUniformLocation {
      var context = Context.from(_material.context)
      if _generation != context.generation {
        _location = context.gl.getUniformLocation(_material.program, _name)
        _generation = context.generation

        # Validate the shader against this uniform
        if !RELEASE {
          var program = _material.program
          var gl = context.gl
          for i in 0..gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS) {
            var info = gl.getActiveUniform(program, i)
            if info.name == _name {
              assert(info.size == 1)
              switch info.type {
                case gl.FLOAT { assert(self is UniformFloat) }
                case gl.FLOAT_MAT3 { assert(self is UniformMat3) }
                case gl.FLOAT_VEC2 { assert(self is UniformVec2) }
                case gl.FLOAT_VEC3 { assert(self is UniformVec3) }
                case gl.FLOAT_VEC4 { assert(self is UniformVec4) }
                case gl.INT { assert(self is UniformInt) }
                case gl.SAMPLER_2D { assert(self is UniformSampler) }
                default { assert(false) }
              }
            }
          }
        }
      }
      return _location
    }
  }

  class UniformFloat : Uniform {
    var _x = 0.0

    def set(x double) {
      if x != _x {
        _x = x
        _isDirty = true
      }
    }

    over prepare {
      var context = Context.from(_material.context)
      if _generation != context.generation || _isDirty {
        context.gl.uniform1f(location, _x)
        _isDirty = false
      }
    }
  }

  class UniformInt : Uniform {
    var _x = 0

    def set(x int) {
      if x != _x {
        _x = x
        _isDirty = true
      }
    }

    over prepare {
      var context = Context.from(_material.context)
      if _generation != context.generation || _isDirty {
        context.gl.uniform1i(location, _x)
        _isDirty = false
      }
    }
  }

  class UniformVec2 : Uniform {
    var _x = 0.0
    var _y = 0.0

    def set(x double, y double) {
      if x != _x || y != _y {
        _x = x
        _y = y
        _isDirty = true
      }
    }

    over prepare {
      var context = Context.from(_material.context)
      if _generation != context.generation || _isDirty {
        context.gl.uniform2f(location, _x, _y)
        _isDirty = false
      }
    }
  }

  class UniformVec3 : Uniform {
    var _x = 0.0
    var _y = 0.0
    var _z = 0.0

    def set(x double, y double, z double) {
      if x != _x || y != _y || z != _z {
        _x = x
        _y = y
        _z = z
        _isDirty = true
      }
    }

    over prepare {
      var context = Context.from(_material.context)
      if _generation != context.generation || _isDirty {
        context.gl.uniform3f(location, _x, _y, _z)
        _isDirty = false
      }
    }
  }

  class UniformVec4 : Uniform {
    var _x = 0.0
    var _y = 0.0
    var _z = 0.0
    var _w = 0.0

    def set(x double, y double, z double, w double) {
      if x != _x || y != _y || z != _z || w != _w {
        _x = x
        _y = y
        _z = z
        _w = w
        _isDirty = true
      }
    }

    over prepare {
      var context = Context.from(_material.context)
      if _generation != context.generation || _isDirty {
        context.gl.uniform4f(location, _x, _y, _z, _w)
        _isDirty = false
      }
    }
  }

  class UniformMat3 : Uniform {
    var _values = [
      1.0, 0.0, 0.0,
      0.0, 1.0, 0.0,
      0.0, 0.0, 1.0,
    ]

    def set(m00 double, m01 double, m02 double, m10 double, m11 double, m12 double, m20 double, m21 double, m22 double) {
      # These values are deliberately transposed because WebGL requires the "transpose" argument of uniformMatrix() to be false
      _cachedValues[0] = m00
      _cachedValues[1] = m10
      _cachedValues[2] = m20
      _cachedValues[3] = m01
      _cachedValues[4] = m11
      _cachedValues[5] = m21
      _cachedValues[6] = m02
      _cachedValues[7] = m12
      _cachedValues[8] = m22

      for i in 0..9 {
        if _cachedValues[i] != _values[i] {
          var swap = _values
          _values = _cachedValues
          _cachedValues = swap
          _isDirty = true
          break
        }
      }
    }

    over prepare {
      var context = Context.from(_material.context)
      if _generation != context.generation || _isDirty {
        context.gl.uniformMatrix3fv(location, false, _values)
        _isDirty = false
      }
    }
  }

  namespace UniformMat3 {
    # Statically allocate this to avoid allocations
    var _cachedValues = [
      1.0, 0.0, 0.0,
      0.0, 1.0, 0.0,
      0.0, 0.0, 1.0,
    ]
  }

  class UniformSampler : Uniform {
    var _texture Texture = null
    var _index = -1

    def set(texture Graphics.Texture, index int) {
      if _texture != texture || _index != index {
        _texture = Texture.from(texture)
        _index = index
        _isDirty = true
      }
    }

    over prepare {
      var context = Context.from(_material.context)
      var gl = context.gl
      assert(_texture == null || context.currentRenderTarget == null || _texture != context.currentRenderTarget.texture)
      if _generation != context.generation || _isDirty {
        gl.uniform1i(location, _index)
        _isDirty = false
      }
      gl.activeTexture(gl.TEXTURE_N(_index))
      gl.bindTexture(gl.TEXTURE_2D, _texture != null && _texture.width > 0 && _texture.height > 0 ? _texture.texture : null)
    }
  }

  class Material :: Graphics.Material {
    const _context Context
    const _format Graphics.VertexFormat
    const _vertexSource string
    const _fragmentSource string
    const _uniformsMap StringMap<Uniform> = {}
    const _uniformsList List<Uniform> = []
    var _generation = 0
    var _program WebGLProgram = null

    def context Graphics.Context {
      return _context
    }

    def format Graphics.VertexFormat {
      return _format
    }

    def vertexSource string {
      return _vertexSource
    }

    def fragmentSource string {
      return _fragmentSource
    }

    def setUniformFloat(name string, x double) {
      var uniform = _uniformsMap.get(name, null)
      if uniform == null {
        uniform = UniformFloat.new(self, name)
        _uniformsMap[name] = uniform
        _uniformsList.append(uniform)
      }
      assert(uniform is UniformFloat)
      (uniform as UniformFloat).set(x)
    }

    def setUniformInt(name string, x int) {
      var uniform = _uniformsMap.get(name, null)
      if uniform == null {
        uniform = UniformInt.new(self, name)
        _uniformsMap[name] = uniform
        _uniformsList.append(uniform)
      }
      assert(uniform is UniformInt)
      (uniform as UniformInt).set(x)
    }

    def setUniformVec2(name string, x double, y double) {
      var uniform = _uniformsMap.get(name, null)
      if uniform == null {
        uniform = UniformVec2.new(self, name)
        _uniformsMap[name] = uniform
        _uniformsList.append(uniform)
      }
      assert(uniform is UniformVec2)
      (uniform as UniformVec2).set(x, y)
    }

    def setUniformVec3(name string, x double, y double, z double) {
      var uniform = _uniformsMap.get(name, null)
      if uniform == null {
        uniform = UniformVec3.new(self, name)
        _uniformsMap[name] = uniform
        _uniformsList.append(uniform)
      }
      assert(uniform is UniformVec3)
      (uniform as UniformVec3).set(x, y, z)
    }

    def setUniformVec4(name string, x double, y double, z double, w double) {
      var uniform = _uniformsMap.get(name, null)
      if uniform == null {
        uniform = UniformVec4.new(self, name)
        _uniformsMap[name] = uniform
        _uniformsList.append(uniform)
      }
      assert(uniform is UniformVec4)
      (uniform as UniformVec4).set(x, y, z, w)
    }

    def setUniformMat3(name string, m00 double, m01 double, m02 double, m10 double, m11 double, m12 double, m20 double, m21 double, m22 double) {
      var uniform = _uniformsMap.get(name, null)
      if uniform == null {
        uniform = UniformMat3.new(self, name)
        _uniformsMap[name] = uniform
        _uniformsList.append(uniform)
      }
      assert(uniform is UniformMat3)
      (uniform as UniformMat3).set(m00, m01, m02, m10, m11, m12, m20, m21, m22)
    }

    def setUniformSampler(name string, texture Graphics.Texture, index int) {
      var uniform = _uniformsMap.get(name, null)
      if uniform == null {
        uniform = UniformSampler.new(self, name)
        _uniformsMap[name] = uniform
        _uniformsList.append(uniform)
      }
      assert(uniform is UniformSampler)
      (uniform as UniformSampler).set(texture, index)
    }

    def program WebGLProgram {
      var gl = _context.gl
      if _generation != _context.generation {
        _program = gl.createProgram
        _compileShader(gl, gl.VERTEX_SHADER, vertexSource)
        _compileShader(gl, gl.FRAGMENT_SHADER, fragmentSource)
        var attributes = format.attributes
        for i in 0..attributes.count {
          gl.bindAttribLocation(_program, i, attributes[i].name)
        }
        gl.linkProgram(_program)
        if !gl.getProgramParameter(_program, gl.LINK_STATUS) {
          throw dynamic.Error.new(gl.getProgramInfoLog(_program))
        }
        _generation = _context.generation

        # Validate this shader against the format
        if !RELEASE {
          for attribute in attributes {
            for i in 0..gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES) {
              var info = gl.getActiveAttrib(program, i)
              if info.name == attribute.name {
                assert(info.size == 1)
                switch attribute.count {
                  case 1 { assert(info.type == gl.FLOAT) }
                  case 2 { assert(info.type == gl.FLOAT_VEC2) }
                  case 3 { assert(info.type == gl.FLOAT_VEC3) }
                  case 4 { assert(info.type == gl.FLOAT_VEC4) }
                  default { assert(false) }
                }
              }
            }
          }
        }
      }
      return _program
    }

    def prepare {
      _context.gl.useProgram(program)
      for uniform in _uniformsList {
        uniform.prepare
      }
    }

    def _compileShader(gl WebGLRenderingContext, type GLenum, source string) {
      var shader = gl.createShader(type)
      gl.shaderSource(shader, source)
      gl.compileShader(shader)
      if !gl.getShaderParameter(shader, gl.COMPILE_STATUS) {
        throw dynamic.Error.new(gl.getShaderInfoLog(shader))
      }
      gl.attachShader(_program, shader)
    }
  }

  namespace Material {
    def from(material Graphics.Material) Material {
      assert(material == null || material is Material)
      return material as Material
    }
  }

  class VertexBuffer :: Graphics.VertexBuffer {
    const _context Context
    var _generation = 0
    var _buffer WebGLBuffer = null
    var _bytes Uint8Array = null
    var _isDirty = true
    var _dirtyMin = INT_MAX
    var _dirtyMax = 0
    var _totalMin = INT_MAX
    var _totalMax = 0
    var _byteCount = 0

    def new(context Context, byteCount int) {
      _context = context
      _byteCount = byteCount
      _bytes = Uint8Array.new(byteCount)
    }

    def context Graphics.Context {
      return _context
    }

    def byteCount int {
      return _byteCount
    }

    def move(sourceByteOffset int, targetByteOffset int, byteCount int) {
      assert(byteCount >= 0)
      assert(sourceByteOffset >= 0 && sourceByteOffset + byteCount <= _byteCount)
      assert(targetByteOffset >= 0 && targetByteOffset + byteCount <= _byteCount)

      if sourceByteOffset != targetByteOffset && byteCount != 0 {
        _bytes.set(_bytes.subarray(sourceByteOffset, _byteCount), targetByteOffset)
        _growDirtyRegion(Math.min(sourceByteOffset, targetByteOffset), Math.max(sourceByteOffset, targetByteOffset) + byteCount)
      }
    }

    def upload(array Graphics.FixedArray, byteOffset int) {
      assert(byteOffset >= 0 && byteOffset + array.byteCount <= _byteCount)
      _bytes.set(array as Uint8Array, byteOffset)
      _growDirtyRegion(byteOffset, byteOffset + array.byteCount)
    }

    def prepare {
      var gl = _context.gl

      if _generation != _context.generation {
        _buffer = gl.createBuffer
        _generation = _context.generation
        _isDirty = true
      }

      gl.bindBuffer(gl.ARRAY_BUFFER, _buffer)

      if _isDirty {
        gl.bufferData(gl.ARRAY_BUFFER, _byteCount, gl.DYNAMIC_DRAW)
        _dirtyMin = _totalMin
        _dirtyMax = _totalMax
        _isDirty = false
      }

      if _dirtyMin < _dirtyMax {
        gl.bufferSubData(gl.ARRAY_BUFFER, _dirtyMin, _bytes.subarray(_dirtyMin, _dirtyMax))
        _dirtyMin = INT_MAX
        _dirtyMax = 0
      }
    }

    def _growDirtyRegion(min int, max int) {
      _dirtyMin = Math.min(_dirtyMin, min)
      _dirtyMax = Math.max(_dirtyMax, max)
      _totalMin = Math.min(_totalMin, min)
      _totalMax = Math.max(_totalMax, max)
    }
  }

  namespace VertexBuffer {
    const INT_MAX = 0x7FFFFFFF

    def from(buffer Graphics.VertexBuffer) VertexBuffer {
      assert(buffer == null || buffer is VertexBuffer)
      return buffer as VertexBuffer
    }
  }

  class Texture :: Graphics.Texture {
    const _context Context
    var _format Graphics.TextureFormat
    var _width int
    var _height int
    var _pixels Uint8Array
    var _renderbuffer WebGLRenderbuffer = null
    var _texture WebGLTexture = null
    var _generation = 0
    var _isFormatDirty = true
    var _isContentDirty = true

    def context Graphics.Context {
      return _context
    }

    def format Graphics.TextureFormat {
      return _format
    }

    def width int {
      return _width
    }

    def height int {
      return _height
    }

    def resize(width int, height int, pixels Graphics.FixedArray) {
      _width = width
      _height = height
      _pixels = pixels as Uint8Array
      _isContentDirty = true
    }

    def setFormat(format Graphics.TextureFormat) {
      if _format != format {
        _format = format
        _isFormatDirty = true
      }
    }

    def texture WebGLTexture {
      var gl = _context.gl

      # Create
      if _generation != _context.generation {
        _texture = gl.createTexture
        _generation = _context.generation
        _isFormatDirty = true
        _isContentDirty = true
      }

      # Format
      if _isFormatDirty {
        gl.bindTexture(gl.TEXTURE_2D, _texture)
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, format.magFilter == .NEAREST ? gl.NEAREST : gl.LINEAR)
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, format.minFilter == .NEAREST ? gl.NEAREST : gl.LINEAR)
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, format.wrap == .REPEAT ? gl.REPEAT : gl.CLAMP_TO_EDGE)
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, format.wrap == .REPEAT ? gl.REPEAT : gl.CLAMP_TO_EDGE)
        _isFormatDirty = false
      }

      # Resize
      if _isContentDirty {
        gl.bindTexture(gl.TEXTURE_2D, _texture)
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, _width, _height, 0, gl.RGBA, gl.UNSIGNED_BYTE, _pixels)
        _isContentDirty = false
      }

      return _texture
    }
  }

  namespace Texture {
    def from(texture Graphics.Texture) Texture {
      assert(texture == null || texture is Texture)
      return texture as Texture
    }
  }

  class RenderTarget :: Graphics.RenderTarget {
    var _context Context
    var _texture Texture
    var _framebuffer WebGLFramebuffer = null
    var _generation = 0
    var _isDirty = true
    var viewport Viewport = .EMPTY

    def context Graphics.Context {
      return _context
    }

    def texture Graphics.Texture {
      return _texture
    }

    def setColor(texture Graphics.Texture) {
      if _texture != texture {
        _texture = Texture.from(texture)
        _isDirty = true
      }
    }

    def framebuffer WebGLFramebuffer {
      var gl = _context.gl
      var texture = _texture.texture

      # Create
      if _generation != _context.generation {
        _framebuffer = gl.createFramebuffer
        _generation = _context.generation
        _isDirty = true
      }

      # Update
      if _isDirty {
        gl.bindFramebuffer(gl.FRAMEBUFFER, _framebuffer)
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0)
        assert(gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE)
        _isDirty = false
      }

      return _framebuffer
    }
  }

  namespace RenderTarget {
    def from(renderTarget Graphics.RenderTarget) RenderTarget {
      assert(renderTarget == null || renderTarget is RenderTarget)
      return renderTarget as RenderTarget
    }
  }
}
