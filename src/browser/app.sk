namespace Browser {
  class App :: Editor.DiagnosticObserver {
    const _keyboardInput KeyboardInput
    const _model = Editor.Model.new("<demo>", BrowserTime.new)
    const _platform = Platform.new
    const _animationLoop AnimationLoop
    const _canvas CanvasRenderer
    const _view Editor.View

    def new {
      _keyboardInput = KeyboardInput.new(_platform)
      _animationLoop = AnimationLoop.new(_platform)
      _canvas = CanvasRenderer.new(_platform, _keyboardInput, _animationLoop)
      _model.setLexer(.SKEW)
      _view = Editor.View.new(_platform, _canvas)
      _view.setModel(_model)
      _view.changePadding(PADDING, PADDING, PADDING, PADDING)
      _view.changeMarginPadding(PADDING * 3, PADDING)
      _view.setScrollbarThickness(11)
      _canvas.changeFont(FONT_SIZE, MARGIN_FONT_SIZE, LINE_HEIGHT, ["Menlo", "Monaco", "Consolas"])
      _canvas.stretchToFitBody
      _canvas.setView(_view)
      _keyboardInput.focus(_view)
      on(window, "focus", e => {
        _keyboardInput.focus(_view)
        _canvas.avoidChromeBugOnWindowFocus
      })
      _animationLoop.start
    }

    def handleDiagnosticsChange(task Editor.DiagnosticTask, diagnostics List<Editor.Diagnostic>) {
      _model.replaceDiagnostics(diagnostics)
    }
  }

  namespace App {
    const PADDING = 5.0
    const FONT_SIZE = 12.0
    const MARGIN_FONT_SIZE = 10.0
    const LINE_HEIGHT = FONT_SIZE * 4 / 3

    @entry
    def main {
      App.new
    }
  }
}
