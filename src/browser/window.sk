namespace Browser {
  enum DeltaMode {
    PIXEL
    LINE
    PAGE
  }

  const _whichToKeyCode IntMap<UI.Key> = {
    8:   .BACKSPACE,
    9:   .TAB,
    13:  .ENTER,
    27:  .ESCAPE,
    33:  .PAGE_UP,
    34:  .PAGE_DOWN,
    35:  .END,
    36:  .HOME,
    37:  .ARROW_LEFT,
    38:  .ARROW_UP,
    39:  .ARROW_RIGHT,
    40:  .ARROW_DOWN,
    44:  .COMMA,
    46:  .DELETE,
    59:  .SEMICOLON,
    186: .SEMICOLON,
    188: .COMMA,
    190: .PERIOD,
  }

  class Window : UI.Window :: UI.Platform {
    const _operatingSystem UI.OperatingSystem
    const _userAgent UI.UserAgent
    const _canvas CanvasElement
    const _element = document.createElement("div")
    const _input = document.createElement("input")
    const _shortcuts Editor.ShortcutMap
    var _windowHasFocus = false
    var _draggingView UI.View = null
    var _mousemove fn(dynamic) = null
    var _mouseup fn(dynamic) = null
    var _window UI.Window = null

    # Clipboard support
    var _cutAndCopyAreProbablyBroken = false
    var _previousClipboard string = null
    var _fakeClipboard = ""

    def new {
      super

      var platform string = dynamic.navigator.platform
      var userAgent string = dynamic.navigator.userAgent
      var vendor string = dynamic.navigator.vendor

      _operatingSystem =
        # OS X encodes the architecture into the platform
        platform == "MacIntel" || platform == "MacPPC" ? .OSX :

        # MSDN sources say Win64 is used
        platform == "Win32" || platform == "Win64" ? .WINDOWS :

        # Assume the user is using Mobile Safari or Chrome and not some random
        # browser with a strange platform (Opera apparently messes with this)
        platform == "iPhone" || platform == "iPad" ? .IOS :

        # Apparently most Android devices have a platform of "Linux" instead
        # of "Android", so check the user agent instead. Also make sure to test
        # for Android before Linux for this reason.
        "Android" in userAgent ? .ANDROID :
        "Linux" in platform ? .LINUX :

        # The platform string has no specification and can be literally anything.
        # Other examples: "BlackBerry", "Nintendo 3DS", "PlayStation 4", etc.
        .UNKNOWN

      _userAgent =
        "Trident" in userAgent ? .IE :
        "Edge" in userAgent ? .EDGE :
        "Chrome" in userAgent ? .CHROME :
        "Firefox" in userAgent ? .FIREFOX :
        "Apple" in vendor ? .SAFARI :
        .UNKNOWN

      # Bug: Safari/IE fail to fire cut/copy events if the input element is empty (http://caniuse.com/clipboard)
      _cutAndCopyAreProbablyBroken = _userAgent == .IE || _userAgent == .EDGE || _userAgent == .SAFARI

      _shortcuts = Editor.ShortcutMap.new(self)
      _canvas = _createCanvas
      _createInput
      _startAnimationLoop
      _prepareElement
      _window = self
    }

    over platform UI.Platform {
      return self
    }

    over setTitle(title string) {
      document.title = title
    }

    over setTheme(theme UI.Theme) {
      _canvas.translator.setTheme(theme)
    }

    over setCursor(cursor UI.Cursor) {
      _element.style.cursor =
        cursor == .TEXT ? "text" :
        "default"
    }

    over renderer UI.SemanticRenderer {
      return _canvas.translator
    }

    over render {
      var translator = _canvas.translator
      _canvas.beginFrame
      translator.renderView(root)
      _canvas.endFrame

      # Move the <input> using a transform to avoid a layout. The <input> must
      # be moved near the cursor so IME UI makes sense (completion list, etc.).
      _input.style.transform = "translate(\(translator.lastCaretX)px, \(translator.lastCaretY)px)"
    }

    over setFont(font UI.Font, names List<string>, size double, height double, flags UI.FontFlags) {
      if font == .CODE_FONT {
        _input.style.height = "\(height)px"
      }
      _canvas.setFont(font, names, size, height, flags)
    }

    def element dynamic {
      return _element
    }

    def stretchToFitBody {
      var style = element.style
      style.position = "fixed"
      style.left = "0"
      style.top = "0"
      style.right = "0"
      style.bottom = "0"
      style.overflow = "hidden"
      document.body.appendChild(element)

      var onresize = (event dynamic) => {
        resize(window.innerWidth, window.innerHeight)
      }

      var onfocus = (event dynamic) => {
        _windowHasFocus = true
        _setHasFocus(true)
      }

      on(window, "resize", onresize)
      on(window, "focus", onfocus)

      on(window, "blur", e => {
        _windowHasFocus = false
        _updateIsActive
      })

      on(document, "visibilitychange", e => {
        _updateIsActive
      })

      onresize(null)
      onfocus(null)
    }

    def resize(width int, height int) {
      var pixelScale double = window.devicePixelRatio ? window.devicePixelRatio : 1
      var style = element.style

      # Safari broke devicePixelRatio
      if _userAgent == .SAFARI {
        pixelScale *= (document.width / window.innerWidth + document.height / window.innerHeight) / 2
      }

      style.width = "\(width)px"
      style.height = "\(height)px"
      _canvas.resize(width, height, pixelScale)
      _handleResize(Vector.new(width, height), pixelScale)
    }

    def operatingSystem UI.OperatingSystem {
      return _operatingSystem
    }

    def userAgent UI.UserAgent {
      return _userAgent
    }

    @neverinline
    def nowInSeconds double {
      return (window.performance ? window.performance : dynamic.Date).now() / 1000
    }

    def createWindow UI.Window {
      var window = _window
      _window = null # The browser lacks the ability to create additional windows
      return window
    }

    def _createCanvas CanvasElement {
      # Attempt to use WebGL first because it's a lot faster
      try {
        return CanvasElementWebGL.new(self)
      }

      # Fall back to the 2D canvas API
      return CanvasElement2D.new(self)
    }

    def _prepareElement {
      var style = element.style
      style.position = "relative"
      style.overflow = "hidden"
      _element.appendChild(_canvas.element)

      _mousemove = event => {
        dispatchEvent(_mouseEventFromEvent(.MOUSE_MOVE, event, null))
      }

      _mouseup = event => {
        dispatchEvent(_mouseEventFromEvent(.MOUSE_UP, event, null))
        _changeDragHandlers(.LOCAL)
        _draggingView = null
      }

      on(_element, "mousedown", event => {
        event.preventDefault()
        _setHasFocus(true)
        _draggingView = null
        _draggingView = dispatchEvent(_mouseEventFromEvent(.MOUSE_DOWN, event, null))
        _changeDragHandlers(.GLOBAL)
      })

      on(_element, "contextmenu", event => {
        event.preventDefault()
      })

      on(_element, "wheel", event => {
        # Pinch-to-zoom in Chrome generates scroll events with the control key
        if event.ctrlKey {
          return
        }

        # Scroll deltas in Firefox are too small unless we handle deltaMode
        var deltaX = event.deltaX
        var deltaY = event.deltaY
        var deltaMode DeltaMode = event.deltaMode
        var scale =
          deltaMode == .PAGE ? size.y :
          deltaMode == .LINE ? 16 :
          1

        dispatchEvent(_mouseEventFromEvent(.MOUSE_SCROLL, event, Vector.new(deltaX * scale, deltaY * scale)))
        event.preventDefault()
      })

      _changeDragHandlers(.LOCAL)
    }

    def _mouseEventFromEvent(type UI.EventType, event dynamic, delta Vector) UI.MouseEvent {
      var bounds = _element.getBoundingClientRect()
      var locationInWindow = Vector.new(event.pageX - bounds.left, event.pageY - bounds.top)
      var target = _draggingView ?? viewFromLocation(locationInWindow)
      return UI.MouseEvent.new(type, target, locationInWindow, _modifiersFromEvent(event), event.detail as int, delta)
    }

    def _setHasFocus(hasFocus bool) {
      if hasFocus {
        _input.enabled = true
        _input.value = ""
        _input.focus()
      }

      else {
        _input.blur()
        _input.enabled = false
      }

      _updateIsActive
    }

    def _updateIsActive {
      _isActive = document.activeElement == _input && !document.hidden && _windowHasFocus
    }

    def _createInput {
      # Make the <input> transparent and give it a width of 0. The <input> must
      # be moved near the cursor so IME UI makes sense (completion list, etc.).
      var style = _input.style
      style.position = "absolute"
      style.border = "none"
      style.outline = "none"
      style.opacity = "0"
      style.padding = "0"
      style.transform = "scaleX(0)" # Safari breaks if we set "width" to 0
      style.left = "0"
      style.top = "0"

      on(_input, "blur", event => {
        _setHasFocus(false)
      })

      on(_input, "keydown", event => {
        var modifiers = _modifiersFromEvent(event)
        var action = _shortcuts.get(_keyCodeFromEvent(event), modifiers)

        # Safari/IE have a broken clipboard implementation. Fall back to the
        # fake clipboard for cut and copy in those browsers. There's no way
        # to do feature detection for this bug unfortunately.
        if action == .CUT || action == .COPY {
          if _cutAndCopyAreProbablyBroken {
            var clipboardEvent = UI.ClipboardEvent.new(action == .CUT ? .CLIPBOARD_CUT : .CLIPBOARD_COPY, viewWithFocus, _fakeClipboard)
            dispatchEvent(clipboardEvent)
            _fakeClipboard = clipboardEvent.text
          }
        }

        # Ignore the paste action (we use the "paste" event instead)
        else if action != .NONE && action != .PASTE {
          _delegate?.triggerAction(action)
          event.preventDefault()
        }

        # Newlines won't appear as input events in a single-line <input>
        else if event.which == '\r' {
          _insertText("\n", false)
          event.preventDefault()
        }
      })

      # These events is supported by all major browsers
      var isComposing = false
      on(_input, "compositionstart", event => isComposing = true)
      on(_input, "compositionend", event => isComposing = false)

      # Text input events
      on(_input, "input", event => _insertText(_input.value, isComposing))
      on(_input, "cut", event => _handleClipboardEvent(event, .CLIPBOARD_CUT))
      on(_input, "copy", event => _handleClipboardEvent(event, .CLIPBOARD_COPY))
      on(_input, "paste", event => _handleClipboardEvent(event, .CLIPBOARD_PASTE))

      element.appendChild(_input)
    }

    def _insertText(text string, isComposing bool) {
      dispatchEvent(UI.TextEvent.new(.TEXT, viewWithFocus, text, isComposing))
      if !isComposing {
        _input.value = ""
      }
    }

    def _handleClipboardEvent(event dynamic, type UI.EventType) {
      var normalClipboard = event.clipboardData
      var ieClipboard = window.clipboardData
      var text = _fakeClipboard

      # Load clipboard data
      if normalClipboard {
        text = normalClipboard.getData("text/plain")
      } else if ieClipboard {
        text = ieClipboard.getData("Text")
      }

      # If cut/copy don't work and we just pasted the same thing, read from the
      # fake clipboard instead of the real one because that may contain content
      # that was cut or copied and that didn't make it back to the real clipboard
      if _cutAndCopyAreProbablyBroken {
        if type == .CLIPBOARD_PASTE && text == _previousClipboard {
          text = _fakeClipboard
        } else {
          _previousClipboard = text
          _fakeClipboard = text
        }
      }

      # Dispatch the event to the view with focus
      var clipboardEvent = UI.ClipboardEvent.new(type, viewWithFocus, text)
      dispatchEvent(clipboardEvent)

      # Save clipboard data
      if clipboardEvent.text != text {
        if normalClipboard {
          normalClipboard.setData("text/plain", clipboardEvent.text)
        } else if ieClipboard {
          ieClipboard.setData("Text", clipboardEvent.text)
        }
        _fakeClipboard = clipboardEvent.text
      }

      # Make sure that this event doesn't actually insert into the input element
      event.preventDefault()
    }

    def _startAnimationLoop {
      var tick fn() = => {
        _delegate?.triggerFrame

        # Chrome sometimes automatically scrolls stuff that shouldn't be scrollable :(
        _element.scrollLeft = 0
        _element.scrollTop = 0

        # Only draw if requested
        if _isInvalid {
          render
          _isInvalid = false
        }

        (window.requestAnimationFrame ? window.requestAnimationFrame : dynamic.setTimeout)(tick)
      }
      tick()
    }

    enum ChangeDragHandlers {
      LOCAL
      GLOBAL
    }

    def _changeDragHandlers(mode ChangeDragHandlers) {
      var old = mode == .GLOBAL ? _element : document
      var new = mode == .GLOBAL ? document : _element

      off(old, "mousemove", _mousemove)
      off(old, "mouseup", _mouseup)

      on(new, "mousemove", _mousemove)
      on(new, "mouseup", _mouseup)
    }
  }

  namespace Window {
    def _modifiersFromEvent(event dynamic) UI.Modifiers {
      return
        (event.altKey ? .ALT : 0) |
        (event.metaKey ? .META : 0) |
        (event.shiftKey ? .SHIFT : 0) |
        (event.ctrlKey ? .CONTROL : 0)
    }

    def _keyCodeFromEvent(event dynamic) UI.Key {
      var which = event.which as int

      if which >= 'A' && which <= 'Z' {
        return (UI.Key.LETTER_A - 'A' + which) as UI.Key
      }

      if which >= '0' && which <= '9' {
        return (UI.Key.NUMBER_0 - '0' + which) as UI.Key
      }

      return _whichToKeyCode.get(event.which as int, .NONE)
    }
  }

  @entry if BUILD == .WWW
  def main {
    var window = Window.new
    window.stretchToFitBody
    Editor.App.new(window)
  }
}
