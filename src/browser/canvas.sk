namespace Browser {
  enum DeltaMode {
    PIXEL
    LINE
    PAGE
  }

  class CanvasRenderer :: Editor.Renderer, AnimationLoopObserver {
    var _element dynamic = null
    var _context dynamic = null
    var _mousemove fn(dynamic) = null
    var _mouseup fn(dynamic) = null
    var _width = 0
    var _height = 0
    var _view Editor.View = null
    var _fontText = ""
    var _marginFontText = ""
    var _fontSize = 0.0
    var _fontNames = [""]
    var _lineHeight = 0.0
    var _advanceWidth = 0.0
    var _marginAdvanceWidth = 0.0
    var _isInvalid = false
    var _isPreviousFontValid = false
    var _idleCount = 0
    var _theme Editor.Theme = null
    var _previousFont Editor.Font = .DEFAULT
    var _cachedColors IntMap<string> = null
    var _keyboardInput KeyboardInput = null

    def new(keyboardInput KeyboardInput) {
      _keyboardInput = keyboardInput
      _element = document.createElement("canvas")
      _context = _element.getContext("2d")
      setCursor(.TEXT)
      setTheme(.XCODE)
      AnimationLoop.addObserver(self)
      _addEventHandlers
    }

    def setTheme(theme Editor.Theme) {
      if _theme != theme {
        _theme = theme
        _cachedColors = {}
        invalidate
      }
    }

    def setView(view Editor.View) {
      if _view != view {
        _view = view
        if view != null {
          view.resize(_width, _height)
          view.resizeFont(_advanceWidth, _marginAdvanceWidth, _lineHeight)
          invalidate
        }
      }
    }

    def updateSize {
      var width int = _element.clientWidth
      var height int = _element.clientHeight
      var ratio double = dynamic.devicePixelRatio

      if _width != width || _height != height {
        _element.width = Math.round(width * ratio)
        _element.height = Math.round(height * ratio)
        _context.scale(ratio, ratio)
        _width = width
        _height = height
        if _view != null {
          _view.resize(width, height)
        }
      }
    }

    def changeFont(fontSize double, marginFontSize double, lineHeight double, fontNames List<string>) {
      _fontNames = fontNames
      fontNames = fontNames.clone
      fontNames.append("monospace")
      var fontSuffix = "px " + ",".join(fontNames)
      _fontSize = fontSize
      _fontText = fontSize.toString + fontSuffix
      _context.font = _fontText
      _marginFontText = marginFontSize.toString + fontSuffix
      _advanceWidth = _measureTextWidth("x".repeat(100)) / 100
      _marginAdvanceWidth = _advanceWidth * marginFontSize / fontSize
      _lineHeight = lineHeight
      if _view != null {
        _view.resizeFont(_advanceWidth, _marginAdvanceWidth, _lineHeight)
      }
    }

    def stretchToFitBody {
      var style = _element.style
      style.position = "fixed"
      style.left = 0
      style.top = 0
      style.width = "100%"
      style.height = "100%"
      on(window, "resize", e => {
        updateSize
        _render
      })
      document.body.style.overflow = "hidden"
      document.body.appendChild(_element)
      updateSize
    }

    def invalidate {
      _isInvalid = true
    }

    def setCursor(cursor Editor.Cursor) {
      _element.style.cursor =
        cursor == .TEXT ? "text" :
        "default"
    }

    def renderCaret(x double, y double, color Editor.Color) {
      _context.fillStyle = _colorToStyle(color)
      _context.fillRect(Math.round(x), Math.round(y), 1, _lineHeight)
    }

    def renderBox(x double, y double, width double, height double, color Editor.Color) {
      _renderBoxWithAlpha(x, y, width, height, color, 255)
    }

    def renderHorizontalLine(x1 double, x2 double, y double, color Editor.Color, alpha int) {
      y = Math.floor(y) + 0.5
      _renderLineWithAlpha(x1, y, x2, y, color, alpha)
    }

    def renderVerticalLine(x double, y1 double, y2 double, color Editor.Color, alpha int) {
      x = Math.floor(x) + 0.5
      _renderLineWithAlpha(x, y1, x, y2, color, alpha)
    }

    def renderText(x double, y double, text string, font Editor.Font, color Editor.Color, alpha int) {
      # Assigning to the font is really expensive in Chrome even if it's the same value
      if !_isPreviousFontValid || font != _previousFont {
        _previousFont = font
        _isPreviousFontValid = true
        _context.font = font == .MARGIN ? _marginFontText : _fontText
      }

      _context.fillStyle = _colorToStyleWithAlpha(color, alpha)
      _context.fillText(text, x, y + _fontSize)
    }

    def renderRightwardShadow(x double, y double, width double, height double) {
      var context = _context
      var gradient = context.createLinearGradient(x + width, 0, x, 0)
      for t = 0.0; t <= 1; t += 1.0 / 4 {
        gradient.addColorStop(t, "rgba(0,0,0,\(t * t / 3))")
      }
      context.fillStyle = gradient
      context.fillRect(x, y, width, height)
    }

    def renderScrollbarThumb(x double, y double, width double, height double, color Editor.Color, alpha int) {
      var context = _context
      var padding = Math.round(Math.min(width, height) / 6)
      var radius = Math.min(width, height) / 2 - padding
      var r = radius * BEZIER_CIRCLE_CONSTANT

      # Shrink the bounds by the padding
      x += padding
      y += padding
      width -= 2 * padding
      height -= 2 * padding
      var xw = x + width
      var yh = y + height

      # Render an approximate rounded rectangle
      context.fillStyle = _colorToStyleWithAlpha(color, alpha)
      context.beginPath()
      context.lineTo(x, y + radius)
      context.bezierCurveTo(x, y + r, x + r, y, x + radius, y)
      context.lineTo(xw - radius, y)
      context.bezierCurveTo(xw - r, y, xw, y + r, xw, y + radius)
      context.lineTo(xw, yh - radius)
      context.bezierCurveTo(xw, yh - r, xw - r, yh, xw - radius, yh)
      context.lineTo(x + radius, yh)
      context.bezierCurveTo(x + r, yh, x, yh - r, x, yh - radius)
      context.fill()
    }

    def renderSquiggle(x double, y double, width double, height double, color Editor.Color) {
      const SIZE = 2.0
      var flip = SIZE
      x = Math.floor(x) + 0.5
      y = Math.floor(y + height * 0.9) + 0.5
      _context.strokeStyle = _colorToStyle(color)
      _context.beginPath()
      while width > 0 {
        _context.lineTo(x, y)
        x += SIZE
        y += flip
        width -= SIZE
        flip = -flip
      }
      _context.stroke()
    }

    def tick {
      _render
    }

    def _measureTextWidth(text string) double {
      return _context.measureText(text).width
    }

    def _colorToStyle(color Editor.Color) string {
      return _colorToStyleWithAlpha(color, 255)
    }

    def _colorToStyleWithAlpha(color Editor.Color, alpha int) string {
      assert(alpha >= 0 && alpha <= 0xFF)
      var key = color | alpha << 24
      if key in _cachedColors {
        return _cachedColors[key]
      }
      var rgba = _theme.findColor(color)
      var text = "rgba(\(rgba.red),\(rgba.green),\(rgba.blue),\(rgba.alpha * alpha / (255.0 * 255.0)))"
      _cachedColors[key] = text
      return text
    }

    def _renderLineWithAlpha(x1 double, y1 double, x2 double, y2 double, color Editor.Color, alpha int) {
      assert(alpha >= 0 && alpha <= 0xFF)
      _context.strokeStyle = _colorToStyleWithAlpha(color, alpha)
      _context.beginPath()
      _context.lineTo(x1, y1)
      _context.lineTo(x2, y2)
      _context.stroke()
    }

    def _renderBoxWithAlpha(x double, y double, width double, height double, color Editor.Color, alpha int) {
      assert(alpha >= 0 && alpha <= 0xFF)
      var minX = Math.round(x)
      var minY = Math.round(y)
      var maxX = Math.round(x + width)
      var maxY = Math.round(y + height)
      _context.fillStyle = _colorToStyleWithAlpha(color, alpha)
      _context.fillRect(minX, minY, maxX - minX, maxY - minY)
    }

    def _render {
      # Skip rendering if not invalid
      if !_isInvalid {
        _idleCount++

        # Render something at 10 fps even when idle otherwise Chrome's
        # render loop goes idle and stutters when starting back up
        if _idleCount == 6 {
          _context.fillStyle = _colorToStyle(.BACKGROUND_MARGIN)
          _context.fillRect(0, 0, 1, 1)
          _idleCount = 0
        }

        return
      }

      # Reset render state
      _idleCount = 0
      _isInvalid = false
      _isPreviousFontValid = false

      # Delegate to the view
      if _view != null {
        _view.render
      }
    }

    def _mouseEventFromEvent(e dynamic) Editor.MouseEvent {
      var x double = e.pageX
      var y double = e.pageY
      for element = _element; element != null; element = element.offsetParent {
        x -= element.offsetLeft
        y -= element.offsetTop
      }
      return Editor.MouseEvent.new(x, y, KeyboardInput.modifiersFromEvent(e))
    }

    enum ChangeDragHandlers {
      LOCAL
      GLOBAL
    }

    def _changeDragHandlers(mode ChangeDragHandlers) {
      var old = mode == .GLOBAL ? _element : document
      var new = mode == .GLOBAL ? document : _element
      off(old, "mousemove", _mousemove)
      off(old, "mouseup", _mouseup)
      on(new, "mousemove", _mousemove)
      on(new, "mouseup", _mouseup)
    }

    def _addEventHandlers {
      _mousemove = e => {
        _view.handleMouseMove(_mouseEventFromEvent(e))
      }

      _mouseup = e => {
        _view.handleMouseUp(_mouseEventFromEvent(e))
        _changeDragHandlers(.LOCAL)
      }

      on(_element, "mousedown", e => {
        e.preventDefault()
        _keyboardInput.focus(_view)
        _view.handleMouseDown(_mouseEventFromEvent(e))
        _changeDragHandlers(.GLOBAL)
      })

      on(_element, "contextmenu", e => {
        e.preventDefault()
      })

      on(_element, "wheel", e => {
        # Pinch-to-zoom in Chrome generates scroll events with the control key
        if e.ctrlKey {
          return
        }

        # Scroll deltas in Firefox are too small unless we handle deltaMode
        var deltaX = e.deltaX
        var deltaY = e.deltaY
        var deltaMode = e.deltaMode
        var scale =
          deltaMode == DeltaMode.LINE ? _lineHeight :
          deltaMode == DeltaMode.PAGE ? _height :
          1

        _view.handleScroll(deltaX * scale, deltaY * scale)
        e.preventDefault()
      })

      _changeDragHandlers(.LOCAL)
    }
  }

  namespace CanvasRenderer {
    const BEZIER_CIRCLE_CONSTANT = (7 - 4 * Math.SQRT_2) / 3
  }
}
