namespace Browser {
  class CanvasElement :: UI.PixelRenderer {
    var _width = 0
    var _height = 0
    var _pixelScale = 0.0
    var _isRendering = false
    var _codeFontSize = 0.0
    var _element = document.createElement("canvas")
    var _mousemove fn(dynamic) = null
    var _mouseup fn(dynamic) = null
    var _window Window = null
    var _translator UI.SemanticToPixelTranslator = null
    var _fontContext = document.createElement("canvas").getContext("2d")
    var _fontInstances IntMap<FontInstance> = {}

    def new(window Window) {
      _window = window
      _translator = UI.SemanticToPixelTranslator.new(self)

      var style = _element.style
      style.width = "100%"
      style.height = "100%"
    }

    def _afterResize
    def setViewport(x double, y double, width double, height double)
    def setDefaultBackgroundColor(color Graphics.RGBA)
    def fillRect(x double, y double, width double, height double, color Graphics.RGBA)
    def fillRoundedRect(x double, y double, width double, height double, color Graphics.RGBA, radius double)
    def strokePolyline(coordinates List<double>, color Graphics.RGBA, thickness double)
    def renderText(x double, y double, text string, font UI.Font, color Graphics.RGBA)
    def renderRectShadow(
      boxX double, boxY double, boxWidth double, boxHeight double,
      clipX double, clipY double, clipWidth double, clipHeight double,
      shadowAlpha double, blurSigma double)

    def element dynamic {
      return _element
    }

    def translator UI.SemanticToPixelTranslator {
      return _translator
    }

    def width int {
      return _width
    }

    def height int {
      return _height
    }

    def pixelScale double {
      return _pixelScale
    }

    def fontInstance(font UI.Font) UI.FontInstance {
      return _fontInstances.get(font, null)
    }

    def advanceWidth(font UI.Font, codePoint int) double {
      return _fontContext
    }

    def setFont(font UI.Font, names List<string>, size double, height double) {
      _fontInstances[font] = FontInstance.new(font, names, size, height, _fontInstanceScale)

      if font == .CODE_FONT {
        _codeFontSize = size
      }
    }

    def beginFrame {
      _isRendering = true
    }

    def endFrame {
      _isRendering = false
    }

    def resize(width int, height int, pixelScale double) {
      if _width != width || _height != height || _pixelScale != pixelScale {
        _width = width
        _height = height
        _pixelScale = pixelScale
        _element.width = Math.round(width * pixelScale)
        _element.height = Math.round(height * pixelScale)
        _fontInstances.each((key, instance) => instance.changePixelScale(_fontInstanceScale))
        _afterResize
      }
    }

    def _fontInstanceScale double {
      return 1
    }
  }
}
