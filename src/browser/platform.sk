namespace Browser {
  class Window :: Editor.Window {
    const _canvas CanvasElement

    def new(platform Platform) {
      var canvas = _createCanvas(platform)
      canvas.changeFont(12, 10, 16, ["Menlo", "Monaco", "Consolas", "monospace"])
      canvas.translator.setTheme(.XCODE)
      _canvas = canvas

      on(window, "focus", e => {
        canvas.setIsActive(true)
        canvas.avoidChromeBugOnWindowFocus
      })

      canvas.stretchToFitElement(document.body)
      canvas.setIsActive(true)

      var tick fn() = => {
        canvas.tick
        (window.requestAnimationFrame ? window.requestAnimationFrame : dynamic.setTimeout)(tick)
      }
      tick()
    }

    def renderer Editor.SemanticRenderer {
      return _canvas.translator
    }

    def setView(view Editor.View) {
      _canvas.setView(view)
    }

    def setTitle(title string) {
      document.title = title
    }
  }

  class Platform :: Editor.Platform {
    var _operatingSystem Editor.OperatingSystem
    var _userAgent Editor.UserAgent
    var _window Window

    def new {
      var platform string = dynamic.navigator.platform
      var userAgent string = dynamic.navigator.userAgent
      var vendor string = dynamic.navigator.vendor

      _operatingSystem =
        # OS X encodes the architecture into the platform
        platform == "MacIntel" || platform == "MacPPC" ? .OSX :

        # MSDN sources say Win64 is used
        platform == "Win32" || platform == "Win64" ? .WINDOWS :

        # Assume the user is using Mobile Safari or Chrome and not some random
        # browser with a strange platform (Opera apparently messes with this)
        platform == "iPhone" || platform == "iPad" ? .IOS :

        # Apparently most Android devices have a platform of "Linux" instead
        # of "Android", so check the user agent instead. Also make sure to test
        # for Android before Linux for this reason.
        "Android" in userAgent ? .ANDROID :
        "Linux" in platform ? .LINUX :

        # The platform string has no specification and can be literally anything.
        # Other examples: "BlackBerry", "Nintendo 3DS", "PlayStation 4", etc.
        .UNKNOWN

      _userAgent =
        "Trident" in userAgent ? .IE :
        "Chrome" in userAgent ? .CHROME :
        "Firefox" in userAgent ? .FIREFOX :
        "Apple" in vendor ? .SAFARI :
        .UNKNOWN

      # The browser lacks the ability to create additional windows
      _window = Window.new(self)
    }

    def operatingSystem Editor.OperatingSystem {
      return _operatingSystem
    }

    def userAgent Editor.UserAgent {
      return _userAgent
    }

    @neverinline
    def nowInSeconds double {
      return (window.performance ? window.performance : dynamic.Date).now() / 1000
    }

    def createGlyphProvider(fontNames List<string>) Graphics.GlyphProvider {
      return GlyphProvider.new(fontNames)
    }

    def createWindow Editor.Window {
      var window = _window
      _window = null
      return window
    }
  }

  def _createCanvas(platform Editor.Platform) CanvasElement {
    var shortcuts = Editor.ShortcutMap.new(platform)

    # Attempt to use WebGL first because it's a lot faster
    try {
      return CanvasElementWebGL.new(platform, shortcuts)
    }

    # Fall back to the 2D canvas API
    return CanvasElement2D.new(platform, shortcuts)
  }

  @entry if BUILD == .BROWSER
  def main {
    Editor.App.new(Platform.new)
  }
}
