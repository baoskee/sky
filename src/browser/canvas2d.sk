namespace Browser {
  class CanvasElement2D : CanvasElement {
    var _context dynamic
    var _cachedStyles IntMap<string> = {}
    var _hasViewport = false
    var _previousFont UI.Font = .CODE_FONT
    var _isPreviousFontValid = false

    def new(window Window) {
      super(window)
      _context = _element.getContext("2d")

      Log.info("initialized 2D canvas")
    }

    over setDefaultBackgroundColor(color Graphics.RGBA) {
      _element.style.background = _colorToStyle(color)
    }

    over setViewport(x double, y double, width double, height double) {
      if _hasViewport {
        _context.restore()
      }

      _context.save()
      _context.translate(x, y)
      _context.beginPath()
      _context.rect(0, 0, width, height)
      _context.clip()
      _hasViewport = true
    }

    over _afterResize {
      _context.scale(_pixelScale, _pixelScale)
    }

    over beginFrame {
      super

      _isPreviousFontValid = false
      _context.clearRect(0, 0, _width, _height)
    }

    over endFrame {
      super

      if _hasViewport {
        _context.restore()
        _hasViewport = false
      }
    }

    over fillRect(x double, y double, width double, height double, color Graphics.RGBA) {
      assert(_isRendering)

      if x >= _width || y >= _height || x + width <= 0 || y + height <= 0 || color.alpha == 0 {
        return
      }

      _context.fillStyle = _colorToStyle(color)
      _context.fillRect(x, y, width, height)
    }

    over fillRoundedRect(x double, y double, width double, height double, color Graphics.RGBA, radius double) {
      assert(_isRendering)

      if x >= _width || y >= _height || x + width <= 0 || y + height <= 0 || color.alpha == 0 {
        return
      }

      radius = Math.min(radius, width / 2, height / 2)

      const BEZIER_CIRCLE_CONSTANT = (7 - 4 * Math.SQRT_2) / 3
      var context = _context
      var r = radius * BEZIER_CIRCLE_CONSTANT
      var xw = x + width
      var yh = y + height

      # Render an approximate rounded rectangle
      context.fillStyle = _colorToStyle(color)
      context.beginPath()
      _lineAndCurveTo(context, x, y + radius, x, y + r, x + r, y, x + radius, y)
      _lineAndCurveTo(context, xw - radius, y, xw - r, y, xw, y + r, xw, y + radius)
      _lineAndCurveTo(context, xw, yh - radius, xw, yh - r, xw - r, yh, xw - radius, yh)
      _lineAndCurveTo(context, x + radius, yh, x + r, yh, x, yh - r, x, yh - radius)
      context.fill()
    }

    over fillPolygon(coordinates List<double>, color Graphics.RGBA) {
      if color.alpha != 0 {
        var context = _context
        context.fillStyle = _colorToStyle(color)
        context.beginPath()

        for i = 0; i < coordinates.count; i += 2 {
          context.lineTo(coordinates[i], coordinates[i + 1])
        }

        context.stroke()
      }
    }

    over strokePolyline(coordinates List<double>, color Graphics.RGBA, thickness double) {
      assert(_isRendering)
      assert(coordinates.count % 2 == 0)

      if color.alpha != 0 {
        var context = _context
        context.strokeStyle = _colorToStyle(color)
        context.lineWidth = thickness
        context.beginPath()

        for i = 0; i < coordinates.count; i += 2 {
          context.lineTo(coordinates[i], coordinates[i + 1])
        }

        context.stroke()
      }
    }

    over renderRectShadow(
      rectX double, rectY double, rectWidth double, rectHeight double,
      clipX double, clipY double, clipWidth double, clipHeight double,
      shadowAlpha double, blurSigma double) {

      assert(_isRendering)

      if clipX >= _width || clipY >= _height || clipX + clipWidth <= 0 || clipY + clipHeight <= 0 || shadowAlpha <= 0 {
        return
      }

      var context = _context
      var offset = 1000
      context.save()
      context.rect(clipX, clipY, clipWidth, clipHeight)
      context.clip()
      context.shadowColor = "rgba(0,0,0,\(shadowAlpha))"
      context.shadowOffsetX = offset * _pixelScale
      context.shadowOffsetY = offset * _pixelScale
      context.shadowBlur = blurSigma * 3 * _pixelScale
      context.fillStyle = "#000"
      context.fillRect(rectX - offset, rectY - offset, rectWidth, rectHeight)
      context.restore()
    }

    over renderText(x double, y double, text string, font UI.Font, color Graphics.RGBA) {
      assert(_isRendering)

      var fontInstance = _fontInstances.get(font, null)
      if fontInstance == null || x >= _width || y >= _height || y + fontInstance.size <= 0 || color.alpha == 0 {
        return
      }

      # Assigning to the font is really expensive in Chrome even if it's the same value
      if !_isPreviousFontValid || font != _previousFont {
        _previousFont = font
        _isPreviousFontValid = true
        _context.font = fontInstance.canvasText
      }

      _context.fillStyle = _colorToStyle(color)
      _context.fillText(text, x, y + fontInstance.size)
    }

    def _colorToStyle(color Graphics.RGBA) string {
      var style = _cachedStyles.get(color as int, null)
      if style == null {
        style = "rgba(\(color.red),\(color.green),\(color.blue),\(color.alpha / 255.0))"
        _cachedStyles[color as int] = style
      }
      return style
    }
  }

  namespace CanvasElement2D {
    def _lineAndCurveTo(context dynamic, ax double, ay double, bx double, by double, cx double, cy double, dx double, dy double) {
      context.lineTo(ax, ay)
      context.bezierCurveTo(bx, by, cx, cy, dx, dy)
    }
  }
}
