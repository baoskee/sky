namespace Browser {
  class CanvasElement2D : CanvasElement {
    var _context dynamic
    var _cachedStyles IntMap<string> = {}

    def new(platform Editor.Platform, shortcuts Editor.ShortcutMap) {
      super(platform, shortcuts)
      _context = _element.getContext("2d")

      Log.info("initialized 2D canvas")
    }

    over setDefaultBackgroundColor(color Graphics.RGBA) {
      _element.style.background = _colorToStyle(color)
    }

    over _renderNothing {
      _context.fillStyle = "rgba(0,0,0,0.001)"
      _context.fillRect(0, 0, 1, 1)
    }

    over _updateSize {
      super
      _context.scale(_pixelScale, _pixelScale)
    }

    over fillBox(x double, y double, width double, height double, color Graphics.RGBA) {
      if x >= _width || y >= _height || x + width <= 0 || y + height <= 0 {
        return
      }

      _context.fillStyle = _colorToStyle(color)
      _context.fillRect(x, y, width, height)
    }

    over fillRoundedBox(x double, y double, width double, height double, color Graphics.RGBA, radius double) {
      if x >= _width || y >= _height || x + width <= 0 || y + height <= 0 {
        return
      }

      radius = Math.min(radius, width / 2, height / 2)

      const BEZIER_CIRCLE_CONSTANT = (7 - 4 * Math.SQRT_2) / 3
      var context = _context
      var r = radius * BEZIER_CIRCLE_CONSTANT
      var xw = x + width
      var yh = y + height

      # Render an approximate rounded rectangle
      context.fillStyle = _colorToStyle(color)
      context.beginPath()
      _lineAndCurveTo(context, x, y + radius, x, y + r, x + r, y, x + radius, y)
      _lineAndCurveTo(context, xw - radius, y, xw - r, y, xw, y + r, xw, y + radius)
      _lineAndCurveTo(context, xw, yh - radius, xw, yh - r, xw - r, yh, xw - radius, yh)
      _lineAndCurveTo(context, x + radius, yh, x + r, yh, x, yh - r, x, yh - radius)
      context.fill()
    }

    over strokePolyline(coordinates List<double>, color Graphics.RGBA, thickness double) {
      assert(coordinates.count % 2 == 0)

      var context = _context
      context.strokeStyle = _colorToStyle(color)
      context.lineWidth = thickness
      context.beginPath()

      for i = 0; i < coordinates.count; i += 2 {
        context.lineTo(coordinates[i], coordinates[i + 1])
      }

      context.stroke()
    }

    over renderBoxShadow(
      boxX double, boxY double, boxWidth double, boxHeight double,
      clipX double, clipY double, clipWidth double, clipHeight double,
      shadowAlpha double, blurSigma double) {

      if clipX >= _width || clipY >= _height || clipX + clipWidth <= 0 || clipY + clipHeight <= 0 {
        return
      }

      var context = _context
      var offset = 1000
      context.save()
      context.rect(clipX, clipY, clipWidth, clipHeight)
      context.clip()
      context.shadowColor = "rgba(0,0,0,\(shadowAlpha))"
      context.shadowOffsetX = offset
      context.shadowOffsetY = offset
      context.shadowBlur = blurSigma * 3
      context.fillStyle = "#000"
      context.fillRect(boxX - offset, boxY - offset, boxWidth, boxHeight)
      context.restore()
    }

    over renderText(x double, y double, text string, font Editor.Font, color Graphics.RGBA) {
      if x >= _width || y >= _height || y + _fontSize <= 0 {
        return
      }

      # Assigning to the font is really expensive in Chrome even if it's the same value
      if !_isPreviousFontValid || font != _previousFont {
        _previousFont = font
        _isPreviousFontValid = true
        _context.font = font == .MARGIN ? _marginFontText : _fontText
      }

      _context.fillStyle = _colorToStyle(color)
      _context.fillText(text, x, y + _fontSize)
    }

    def _colorToStyle(color Graphics.RGBA) string {
      var style = _cachedStyles.get(color as int, null)
      if style == null {
        style = "rgba(\(color.red),\(color.green),\(color.blue),\(color.alpha / 255.0))"
        _cachedStyles[color as int] = style
      }
      return style
    }
  }

  namespace CanvasElement2D {
    def _lineAndCurveTo(context dynamic, ax double, ay double, bx double, by double, cx double, cy double, dx double, dy double) {
      context.lineTo(ax, ay)
      context.bezierCurveTo(bx, by, cx, cy, dx, dy)
    }
  }
}
