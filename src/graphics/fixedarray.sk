namespace Graphics {
  type FixedArray {
    def byteCount int

    def getByte(index int) int
    def setByte(index int, value int)

    def getFloat(index int) double
    def setFloat(index int, value double)

    def getRange(index int, byteCount int) FixedArray
    def setRange(index int, values FixedArray)
  }

  namespace FixedArray {
    def new(byteCount int) FixedArray
  }

  ################################################################################

  if TARGET == .JAVASCRIPT {
    type FixedArray : Uint8Array {
      def byteCount int {
        return (self as Uint8Array).length
      }

      def getByte(index int) int {
        assert(index >= 0 && index + 1 <= byteCount)
        return (self as Uint8Array)[index]
      }

      def setByte(index int, value int) {
        assert(index >= 0 && index + 1 <= byteCount)
        (self as Uint8Array)[index] = value
      }

      def getFloat(index int) double {
        assert(index >= 0 && index + 4 <= byteCount)
        _initialize
        _bytes[0] = (self as Uint8Array)[index]
        _bytes[1] = (self as Uint8Array)[index + 1]
        _bytes[2] = (self as Uint8Array)[index + 2]
        _bytes[3] = (self as Uint8Array)[index + 3]
        return _float[0]
      }

      def setFloat(index int, value double) {
        assert(index >= 0 && index + 4 <= byteCount)
        _initialize
        _float[0] = value
        (self as Uint8Array)[index] = _bytes[0]
        (self as Uint8Array)[index + 1] = _bytes[1]
        (self as Uint8Array)[index + 2] = _bytes[2]
        (self as Uint8Array)[index + 3] = _bytes[3]
      }

      def getRange(index int, byteCount int) FixedArray {
        assert(index >= 0 && byteCount >= 0 && index + byteCount <= self.byteCount)
        return (self as Uint8Array).subarray(index, index + byteCount) as FixedArray
      }

      def setRange(index int, values FixedArray) {
        assert(index >= 0 && index + values.byteCount <= byteCount)
        (self as Uint8Array).set(values as Uint8Array, index)
      }
    }

    namespace FixedArray {
      var _bytes Uint8Array = null
      var _float Float32Array = null

      def new(byteCount int) FixedArray {
        return Uint8Array.new(byteCount) as FixedArray
      }

      def _initialize {
        _float ?= Float32Array.new(1)
        _bytes ?= Uint8Array.new(_float.buffer)
      }
    }
  }
}
