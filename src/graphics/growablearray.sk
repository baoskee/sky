namespace Graphics {
  class GrowableArray {
    var _array FixedArray = null
    var _byteCount = 0
    var _byteCapacity = INITIAL_BYTE_CAPACITY

    def new {
      _array = FixedArray.new(INITIAL_BYTE_CAPACITY)
    }

    def new(array FixedArray) {
      _array = array
      _byteCount = _byteCapacity = array.byteCount
    }

    def clear {
      _byteCount = 0
    }

    def isEmpty bool {
      return _byteCount == 0
    }

    def byteCount int {
      return _byteCount
    }

    def fixedArray FixedArray {
      return _array.getRange(0, _byteCount)
    }

    def appendRange(array FixedArray) GrowableArray {
      _ensureSpace(array.byteCount)
      _array.setRange(_byteCount, array)
      _byteCount += array.byteCount
      return self
    }

    def appendByte(value int) GrowableArray {
      _ensureSpace(1)
      _array.setByte(_byteCount, value)
      _byteCount++
      return self
    }

    def appendFloat(value double) GrowableArray {
      _ensureSpace(4)
      _array.setFloat(_byteCount, value)
      _byteCount += 4
      return self
    }

    def appendVertex(x double, y double, u double, v double, color RGBA) {
      var byteCount = _byteCount
      _ensureSpace(4 * 5)
      _array.setFloat(byteCount, x)
      _array.setFloat(byteCount + 4, y)
      _array.setFloat(byteCount + 8, u)
      _array.setFloat(byteCount + 12, v)
      _array.setByte(byteCount + 16, color.red)
      _array.setByte(byteCount + 17, color.green)
      _array.setByte(byteCount + 18, color.blue)
      _array.setByte(byteCount + 19, color.alpha)
      _byteCount = byteCount + 4 * 5
    }

    def appendVertex(x double, y double, u double, v double, color RGBA, a int, b int, c int, d int) {
      var byteCount = _byteCount
      _ensureSpace(4 * 6)
      _array.setFloat(byteCount, x)
      _array.setFloat(byteCount + 4, y)
      _array.setFloat(byteCount + 8, u)
      _array.setFloat(byteCount + 12, v)
      _array.setByte(byteCount + 16, color.red)
      _array.setByte(byteCount + 17, color.green)
      _array.setByte(byteCount + 18, color.blue)
      _array.setByte(byteCount + 19, color.alpha)
      _array.setByte(byteCount + 20, a)
      _array.setByte(byteCount + 21, b)
      _array.setByte(byteCount + 22, c)
      _array.setByte(byteCount + 23, d)
      _byteCount = byteCount + 4 * 6
    }

    def _ensureSpace(space int) {
      if _byteCount + space > _byteCapacity {
        _byteCapacity *= 2
        var array = FixedArray.new(_byteCapacity)
        array.setRange(0, _array)
        _array = array
      }
    }
  }

  namespace GrowableArray {
    const INITIAL_BYTE_CAPACITY = 256
  }
}
