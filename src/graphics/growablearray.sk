namespace Graphics {
  class GrowableArray {
    var _array FixedArray = null
    var _byteCount = 0
    var _byteCapacity = INITIAL_BYTE_CAPACITY

    def new {
      _array = FixedArray.new(INITIAL_BYTE_CAPACITY)
    }

    def new(array FixedArray) {
      _array = array
      _byteCount = _byteCapacity = array.byteCount
    }

    def clear {
      _byteCount = 0
    }

    def isEmpty bool {
      return _byteCount == 0
    }

    def byteCount int {
      return _byteCount
    }

    def fixedArray FixedArray {
      return _array.getRange(0, _byteCount)
    }

    def appendRange(array FixedArray) GrowableArray {
      _ensureSpace(array.byteCount)
      _array.setRange(_byteCount, array)
      _byteCount += array.byteCount
      return self
    }

    def appendByte(value int) GrowableArray {
      _ensureSpace(1)
      _array.setByte(_byteCount, value)
      _byteCount++
      return self
    }

    def appendFloat(value double) GrowableArray {
      _ensureSpace(4)
      _array.setFloat(_byteCount, value)
      _byteCount += 4
      return self
    }

    def appendVertex(x double, y double, u double, v double, color RGBA) {
      appendFloat(x).appendFloat(y).appendFloat(u).appendFloat(v)
      appendByte(color.red).appendByte(color.green).appendByte(color.blue).appendByte(color.alpha)
    }

    def _ensureSpace(space int) {
      if _byteCount + space > _byteCapacity {
        _byteCapacity *= 2
        var array = FixedArray.new(_byteCapacity)
        array.setRange(0, _array)
        _array = array
      }
    }
  }

  namespace GrowableArray {
    const INITIAL_BYTE_CAPACITY = 256
  }
}
