namespace UI {
  enum Cursor {
    ARROW
    TEXT
  }

  enum Direction {
    DOWN
    LEFT
    RIGHT
    UP
  }

  # This rendering interface is super simple so that it'll work for both a pixel-
  # based interface and a terminal-based interface.
  interface SemanticRenderer {
    # Getters
    def fontInstance(font Font) FontInstance

    # Commands
    def renderCaret(x double, y double, color Color)
    def renderDisplayList(list Graphics.DisplayList, originalWidth double, originalHeight double, x double, y double, width double, height double)
    def renderHorizontalLine(x1 double, x2 double, y double, color Color)
    def renderRect(x double, y double, width double, height double, color Color)
    def renderScrollbarThumb(x double, y double, width double, height double, color Color)
    def renderShadow(x double, y double, width double, height double, direction Direction)
    def renderSquiggle(x double, y double, width double, height double, color Color)
    def renderText(x double, y double, text string, font Font, color Color, alpha int)
    def renderVerticalLine(x double, y1 double, y2 double, color Color)
    def renderView(view View)
  }

  # This rendering interface contains the minimal requirements for pixel-based
  # renderers. That way those renderers can just worry about rendering pixels
  # and not about translating semanting rendering commands.
  interface PixelRenderer {
    # Getters
    def width int
    def height int
    def pixelScale double
    def fontInstance(font Font) FontInstance

    # Commands
    def setViewport(x double, y double, width double, height double)
    def setDefaultBackgroundColor(color Graphics.RGBA)
    def fillRect(x double, y double, width double, height double, color Graphics.RGBA)
    def fillRoundedRect(x double, y double, width double, height double, color Graphics.RGBA, radius double)
    def fillPolygon(coordinates List<double>, color Graphics.RGBA)
    def strokePolyline(coordinates List<double>, color Graphics.RGBA, thickness double)
    def renderText(x double, y double, text string, font Font, color Graphics.RGBA)
    def renderRectShadow(
      rectX double, rectY double, rectWidth double, rectHeight double,
      clipX double, clipY double, clipWidth double, clipHeight double,
      shadowAlpha double, blurSigma double)
  }

  # This contains all of the mappings from semantic rendering commands to pixels
  class SemanticToPixelTranslator :: SemanticRenderer {
    const _renderer PixelRenderer
    var _theme Theme = .FALLBACK
    var _viewport Rect = .EMPTY
    var lastCaretX = 0.0
    var lastCaretY = 0.0

    def fontInstance(font Font) FontInstance {
      return _renderer.fontInstance(font)
    }

    def renderView(view View) {
      var bounds = view.bounds
      var oldViewport = _viewport
      var left = oldViewport.left + Math.max(bounds.left, 0)
      var top = oldViewport.top + Math.max(bounds.top, 0)
      var right = oldViewport.left + Math.min(bounds.right, oldViewport.width)
      var bottom = oldViewport.top + Math.min(bounds.bottom, oldViewport.height)
      var newViewport = view == view.window.root ? view.bounds : Rect.new(left, top, right - left, bottom - top)

      _renderer.setViewport(newViewport.x, newViewport.y, newViewport.width, newViewport.height)
      _viewport = newViewport
      view.render
      _viewport = oldViewport
    }

    def setTheme(theme Theme) {
      _theme = theme
      _renderer.setDefaultBackgroundColor(theme.findColor(.BACKGROUND_DEFAULT))
    }

    def renderDisplayList(list Graphics.DisplayList, originalWidth double, originalHeight double, x double, y double, width double, height double) {
      list.run(_renderer, originalWidth, originalHeight, x, y, width, height)
    }

    def renderRect(x double, y double, width double, height double, color Color) {
      _renderer.fillRect(x, y, width, height, _theme.findColor(color))
    }

    def renderCaret(x double, y double, color Color) {
      lastCaretX = x + _viewport.x
      lastCaretY = y + _viewport.y
      _renderer.fillRect(x, y, 1, _renderer.fontInstance(.CODE_FONT).lineHeight, _theme.findColor(color))
    }

    def renderSquiggle(x double, y double, width double, height double, color Color) {
      const SIZE = 2.0
      var flip = SIZE
      var coordinates List<double> = []

      x = Math.floor(x) + 0.5
      y = Math.floor(y + height * 0.9) + 0.5

      while width > 0 {
        coordinates.append(x)
        coordinates.append(y)
        x += SIZE
        y += flip
        width -= SIZE
        flip = -flip
      }

      _renderer.strokePolyline(coordinates, _theme.findColor(color), 1)
    }

    def renderShadow(x double, y double, width double, height double, direction Direction) {
      var isX = direction == .LEFT || direction == .RIGHT
      _renderer.renderRectShadow(
        direction == .LEFT ? x + width : direction == .RIGHT ? x - 2 * width : x - height,
        direction == .UP ? y + height : direction == .DOWN ? y - 2 * height : y - width,
        isX ? 2 * width : width + 2 * height,
        isX ? height + 2 * width : 2 * height,
        x, y, width, height,
        0.5, (isX ? width : height) / 3.0)
    }

    def renderText(x double, y double, text string, font Font, color Color, alpha int) {
      _renderer.renderText(x, y, text, font, _theme.findColor(color).multiplyAlpha(alpha))
    }

    def renderHorizontalLine(x1 double, x2 double, y double, color Color) {
      if x1 < x2 {
        _renderer.fillRect(x1, y, x2 - x1, 1, _theme.findColor(color))
      }
    }

    def renderVerticalLine(x double, y1 double, y2 double, color Color) {
      if y1 < y2 {
        _renderer.fillRect(x, y1, 1, y2 - y1, _theme.findColor(color))
      }
    }

    def renderScrollbarThumb(x double, y double, width double, height double, color Color) {
      var padding = Math.round(Math.min(width, height) / 6)

      # Shrink the bounds by the padding
      x += padding
      y += padding
      width -= 2 * padding
      height -= 2 * padding

      _renderer.fillRoundedRect(x, y, width, height, _theme.findColor(color).multiplyAlpha(127), width / 2)
    }
  }
}
