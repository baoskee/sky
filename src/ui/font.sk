namespace UI {
  enum Font {
    CODE_FONT
    MARGIN_FONT
    UI_FONT
    UI_FONT_BOLD
  }

  flags FontFlags {
    BOLD
    ITALIC
  }

  def roundUpToNextTabStop(value double, spacing double) double {
    return Math.floor(value / spacing + 1) * spacing
  }

  interface FontInstance {
    def font Font
    def size double
    def lineHeight double
    def flags FontFlags
    def advanceWidth(codePoint int) double # This assumes a 1:1 mapping between glyphs and code points
    def renderGlyph(codePoint int) Graphics.Glyph # This may return null
  }

  # The current state is only valid after a call to "reset" and "moveNext"
  class AdvanceWidthIterator {
    const _unicodeIterator = Unicode.StringIterator.new
    var _font FontInstance = null
    var _advanceWidthFromLeft = 0.0
    var _spaceAdvanceWidth = 0.0
    var _tabStopSpacing = 0.0

    def currentIndex int {
      return _unicodeIterator.index
    }

    def advanceWidthFromLeft double {
      return _advanceWidthFromLeft
    }

    def reset(text string) {
      _unicodeIterator.reset(text, 0)
      _advanceWidthFromLeft = 0
    }

    def setFont(font FontInstance, indent int) {
      if _font != font {
        _font = font
        _spaceAdvanceWidth = font.advanceWidth(' ')
      }
      _tabStopSpacing = _spaceAdvanceWidth * indent
    }

    def nextCodePoint int {
      var codePoint = _unicodeIterator.nextCodePoint
      if codePoint != -1 {
        if codePoint == '\t' {
          _advanceWidthFromLeft = roundUpToNextTabStop(_advanceWidthFromLeft, _tabStopSpacing)
        } else {
          _advanceWidthFromLeft += _font.advanceWidth(codePoint)
        }
      }
      return codePoint
    }

    # This assumes the index is between code points, not in the middle of one
    def seekToIndex(index int) {
      var iterator = _unicodeIterator
      var oldIndex = iterator.index

      # No-op
      if index == oldIndex {
        return
      }

      # Scan forward
      if index > oldIndex {
        while iterator.index < index && nextCodePoint != -1 {}
        return
      }

      # Try scanning backward
      if index > oldIndex / 2 {
        while true {
          var codePoint = iterator.previousCodePoint

          # There's no way of knowing how wide a tab stop is by itself
          if codePoint == '\t' {
            iterator.index = 0
            break
          }

          # We're using doubles so error accumulation should be small
          _advanceWidthFromLeft -= _font.advanceWidth(codePoint)

          # Stop when the index was reached
          if iterator.index <= index {
            return
          }
        }
      }

      # If that didn't work, start over from the beginning and scan forward
      iterator.index = 0
      _advanceWidthFromLeft = 0
      while iterator.index < index && nextCodePoint != -1 {}
    }

    # Note: this will not seek backward
    def seekForwardToAdvanceWidth(advanceWidth double) {
      var previousAdvanceWidth = advanceWidthFromLeft
      var previousIndex = currentIndex

      # Seek up to and one past the query
      while advanceWidthFromLeft < advanceWidth {
        previousAdvanceWidth = advanceWidthFromLeft
        previousIndex = currentIndex

        # Don't run off the end of the string
        if nextCodePoint == -1 {
          break
        }
      }

      # Bisect the overlapped character at the center point
      if advanceWidth < (previousAdvanceWidth + advanceWidthFromLeft) / 2 {
        _unicodeIterator.index = previousIndex
        _advanceWidthFromLeft = previousAdvanceWidth
      }
    }
  }

  namespace AdvanceWidthIterator {
    const INSTANCE = new
  }
}
