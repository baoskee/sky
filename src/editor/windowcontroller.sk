namespace Editor {
  interface WindowObserver {
    def handleAction(action Action)
    def handleFrame
  }

  class WindowController :: UI.WindowDelegate, DocumentStoreObserver {
    const _window UI.Window
    const _observers List<WindowObserver> = []
    const _documentStore = DocumentStore.new
    const _views List<View> = []
    var _currentView View = null
    var _nextUntitledID = 1

    def new(platform UI.Platform) {
      var window = platform.createWindow
      window.setTheme(.XCODE)
      window.setFont(.CODE_FONT, MONOSPACE_FONTS, 12, 16, 0)
      window.setFont(.MARGIN_FONT, MONOSPACE_FONTS, 10, 14, 0)
      window.setFont(.UI_FONT, SANS_SERIF_FONTS, 12, 16, 0)
      window.setDelegate(self)
      _window = window

      var tabs = TabsView.new(self)
      tabs.setLayout(.STRETCH, 0, 0, .MIN, 0, window.theme.tabAreaHeight)
      tabs.appendTo(window.root)

      _documentStore.addObserver(self)
      _documentStore.appendDocument(createNewDocument)
    }

    def window UI.Window {
      return _window
    }

    def documentStore DocumentStore {
      return _documentStore
    }

    def createNewDocument Model {
      var name = _nextUntitledID > 1 ? "Untitled \(_nextUntitledID)" : "Untitled"
      var document = Model.new(name, window.platform, window.renderer.fontInstance(.CODE_FONT), 2)
      document.setLexer(.SKEW)
      _nextUntitledID++
      return document
    }

    def addObserver(observer WindowObserver) {
      _observers.appendOne(observer)
    }

    def removeObserver(observer WindowObserver) {
      _observers.removeOne(observer)
    }

    def triggerFrame {
      for observer in _observers {
        observer.handleFrame
      }
    }

    def triggerAction(action Action) {
      # Avoid issues with mutation during iteration if the
      # list of observers changes while handling the action
      for observer in _observers.clone {
        observer.handleAction(action)
      }
    }

    def _createViewForDocument(document Model) View {
      var view = View.new(self)

      if BUILD != .TERMINAL {
        view.changePadding(5, 5, 5, 5)
        view.changeMarginPadding(15, 5)
        view.setLayout(.STRETCH, 0, 0, .STRETCH, window.theme.tabAreaHeight, 0)
      }

      else {
        view.setScrollbarThickness(1)
        view.changePadding(0, 0, 1, 0) # Leave one character of padding on the right so the caret can be seen at the end of the line
        view.changeMarginPadding(1, 1)
      }

      view.setModel(document)
      return view
    }

    def handleDocumentStoreChange(moved Model, from int, to int) {
      # Keep the list of views in sync with the list of documents
      if moved != null {
        if from == -1 { _views.insert(to, _createViewForDocument(moved)) }
        else if to == -1 { _views.takeAt(from).destroy }
        else { _views.insert(to, _views.takeAt(from)) }
      }

      # Make sure the active view reflects the active document
      var view = _documentStore.activeIndex != -1 ? _views[_documentStore.activeIndex] : null
      if view != _currentView {
        if _currentView != null {
          _currentView.removeFromParent
        }
        _currentView = view
        if view != null {
          view.appendTo(window.root)
          window.focusView(view)
          window.setTitle("\(view.model.name) - \(TITLE)")
        } else {
          window.setTitle(TITLE)
        }
      }

      _window.invalidate
    }
  }

  namespace WindowController {
    const TITLE = "Sky Text Editor"

    const MONOSPACE_FONTS = [
      "Monaco",
      "Menlo",
      "Consolas",
      "Courier New",
      "monospace",
    ]

    const SANS_SERIF_FONTS = [
      "San Francisco",
      "Lucida Grande",
      "Segoe UI",
      "Arial",
      "sans-serif",
    ]
  }
}
