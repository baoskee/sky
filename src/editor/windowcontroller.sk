namespace Editor {
  interface WindowObserver {
    def handleAction(action Action)
    def handleFrame
  }

  class WindowController :: UI.WindowDelegate, DocumentStoreObserver {
    const _window UI.Window
    const _observers List<WindowObserver> = []
    const _documents = DocumentStore.new
    const _views List<View> = []

    def new(platform UI.Platform) {
      var window = platform.createWindow
      window.setTitle("Untitled - Sky Text Editor")
      window.setTheme(.XCODE)
      window.setFont(.CODE_FONT, MONOSPACE_FONTS, 12, 16, 0)
      window.setFont(.MARGIN_FONT, MONOSPACE_FONTS, 10, 14, 0)
      window.setFont(.UI_FONT, SANS_SERIF_FONTS, 12, 16, 0)
      _window = window

      var model = Model.new("Untitled", platform, window.renderer.fontInstance(.CODE_FONT), 2)
      model.setLexer(.SKEW)
      _documents.appendDocument(model)

      var view = View.new(self, model)
      if BUILD != .TERMINAL {
        view.changePadding(5, 5, 5, 5)
        view.changeMarginPadding(15, 5)
        view.setLayout(.STRETCH, 0, 0, .STRETCH, TabsView.HEIGHT, 0)

        var tabs = TabsView.new(self)
        tabs.setLayout(.STRETCH, 0, 0, .MIN, 0, TabsView.HEIGHT)
        tabs.appendTo(window.root)
      } else {
        view.setScrollbarThickness(1)
        view.changePadding(0, 0, 1, 0) # Leave one character of padding on the right so the caret can be seen at the end of the line
        view.changeMarginPadding(1, 1)
      }
      view.appendTo(window.root)

      window.setDelegate(self)
      window.focusView(view)
    }

    def window UI.Window {
      return _window
    }

    def documents DocumentStore {
      return _documents
    }

    def addObserver(observer WindowObserver) {
      _observers.appendOne(observer)
    }

    def removeObserver(observer WindowObserver) {
      _observers.removeOne(observer)
    }

    def triggerFrame {
      for observer in _observers {
        observer.handleFrame
      }
    }

    def triggerAction(action Action) {
      for observer in _observers {
        observer.handleAction(action)
      }
    }

    def handleDocumentStoreChange(model Model, from int, to int) {
    }
  }

  namespace WindowController {
    const MONOSPACE_FONTS = [
      "Monaco",
      "Menlo",
      "Consolas",
      "Courier New",
      "monospace",
    ]

    const SANS_SERIF_FONTS = [
      "San Francisco",
      "Lucida Grande",
      "Segoe UI",
      "Arial",
      "sans-serif",
    ]
  }
}
