namespace Editor {
  # Colors in the theme are identified semantically using these identifiers.
  # Most identifiers have a fallback identifier that will be substituted if
  # the theme doesn't override that identifier's color.
  enum Color {
    # Border colors
    BORDER_MARGIN

    # Background colors
    BACKGROUND_DEFAULT
    BACKGROUND_DIAGNOSTIC_ERROR
    BACKGROUND_DIAGNOSTIC_WARNING
    BACKGROUND_MARGIN
    BACKGROUND_MARGIN_HIGHLIGHTED
    BACKGROUND_SELECTED

    # Text colors
    FOREGROUND_CARET
    FOREGROUND_DEFAULT
    FOREGROUND_DIAGNOSTIC_ERROR
    FOREGROUND_DIAGNOSTIC_WARNING
    FOREGROUND_MARGIN
    FOREGROUND_MARGIN_HIGHLIGHTED

    # Syntax-specific colors
    FOREGROUND_ANNOTATION
    FOREGROUND_COMMENT
    FOREGROUND_CONSTANT
    FOREGROUND_DEFINITION
    FOREGROUND_KEYWORD
    FOREGROUND_KEYWORD_CONSTANT
    FOREGROUND_NUMBER
    FOREGROUND_PREPROCESSOR
    FOREGROUND_STRING
    FOREGROUND_TYPE

    # Scrollbar colors
    SCROLLBAR_THUMB
  }

  namespace Color {
    const FALLBACK IntMap<int> = {
      BACKGROUND_MARGIN:             BACKGROUND_DEFAULT,
      BACKGROUND_MARGIN_HIGHLIGHTED: BACKGROUND_MARGIN,
      FOREGROUND_ANNOTATION:         FOREGROUND_DEFAULT,
      FOREGROUND_CARET:              FOREGROUND_DEFAULT,
      FOREGROUND_COMMENT:            FOREGROUND_DEFAULT,
      FOREGROUND_CONSTANT:           FOREGROUND_DEFAULT,
      FOREGROUND_DEFINITION:         FOREGROUND_DEFAULT,
      FOREGROUND_KEYWORD:            FOREGROUND_DEFAULT,
      FOREGROUND_KEYWORD_CONSTANT:   FOREGROUND_KEYWORD,
      FOREGROUND_MARGIN:             FOREGROUND_DEFAULT,
      FOREGROUND_MARGIN_HIGHLIGHTED: FOREGROUND_MARGIN,
      FOREGROUND_NUMBER:             FOREGROUND_DEFAULT,
      FOREGROUND_PREPROCESSOR:       FOREGROUND_DEFAULT,
      FOREGROUND_STRING:             FOREGROUND_DEFAULT,
      FOREGROUND_TYPE:               FOREGROUND_DEFAULT,
      SCROLLBAR_THUMB:               FOREGROUND_DEFAULT,
    }
  }

  # Colors are stored as 8-bit RGBA values and will be constant-folded at
  # compile time in release mode. They are stored using an enum type instead
  # of int for type safety.
  type RGBA : int {
    def red int {
      return (self as int) >> 16 & 255
    }

    def green int {
      return (self as int) >> 8 & 255
    }

    def blue int {
      return (self as int) & 255
    }

    def alpha int {
      return (self as int) >>> 24
    }
  }

  namespace RGBA {
    def transparent RGBA {
      return new(0, 0, 0, 0)
    }

    def new(r int, g int, b int) RGBA {
      return new(r, g, b, 255)
    }

    def new(r int, g int, b int, a int) RGBA {
      assert(r >= 0 && r <= 0xFF)
      assert(g >= 0 && g <= 0xFF)
      assert(b >= 0 && b <= 0xFF)
      assert(a >= 0 && a <= 0xFF)
      return (r << 16 | g << 8 | b | a << 24) as RGBA
    }

    def hex(rgb int) RGBA {
      return hexa(rgb, 255)
    }

    def hexa(rgb int, alpha int) RGBA {
      assert(rgb >= 0 && rgb <= 0xFFFFFF)
      assert(alpha >= 0 && alpha <= 0xFF)
      return (rgb | alpha << 24) as RGBA
    }
  }

  # A theme defines a color map for the view. All color identifiers have
  # default values either by having a theme fallback color directly or by
  # being substituted with another identifier that has a fallback color.
  class Theme {
    const colors IntMap<RGBA>

    def findColor(color Color) RGBA {
      while !(color in colors) {
        var next = Color.FALLBACK.get(color, color) as Color
        if next != color {
          color = next
        } else if self != FALLBACK {
          return FALLBACK.findColor(color)
        } else {
          return RGBA.transparent
        }
      }
      return colors[color]
    }
  }

  namespace Theme {
    const FALLBACK = Theme.new({
      Color.BACKGROUND_DEFAULT: RGBA.hex(0xFFFFFF),
      Color.BACKGROUND_DIAGNOSTIC_ERROR: RGBA.hex(0xFF8877),
      Color.BACKGROUND_DIAGNOSTIC_WARNING: RGBA.hex(0xFFEF00),
      Color.BACKGROUND_SELECTED: RGBA.hex(0x7F7F7F),
      Color.BORDER_MARGIN: RGBA.transparent,
      Color.FOREGROUND_DEFAULT: RGBA.hex(0x000000),
      Color.FOREGROUND_DIAGNOSTIC_ERROR: RGBA.hex(0x000000),
      Color.FOREGROUND_DIAGNOSTIC_WARNING: RGBA.hex(0x000000),
    })
  }

  enum Cursor {
    ARROW
    TEXT
  }

  # The margin font is different so the renderer can use a different font if
  # it makes sense. Margin numbers usually use a smaller font than the content.
  enum Font {
    DEFAULT
    MARGIN
  }

  # This rendering interface is super simple so that it'll work for both a pixel-
  # based interface and a terminal-based interface.
  interface Renderer {
    def invalidate
    def setCursor(cursor Cursor)
    def renderBox(x double, y double, width double, height double, color Color)
    def renderCaret(x double, y double, color Color)
    def renderSquiggle(x double, y double, width double, height double, color Color)
    def renderRightwardShadow(x double, y double, width double, height double)
    def renderText(x double, y double, text string, font Font, color Color, alpha int)
    def renderHorizontalLine(x1 double, x2 double, y double, color Color, alpha int)
    def renderVerticalLine(x double, y1 double, y2 double, color Color, alpha int)
    def renderScrollbarThumb(x double, y double, width double, height double, color Color, alpha int)
  }
}
