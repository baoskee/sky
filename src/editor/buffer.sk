namespace Editor {
  const INVALID_ADVANCE_WIDTH = -1.0

  enum CharacterClass {
    WORD
    OTHER
    SPACE
  }

  # For syntax highlighting, each line stores a sorted list of styled spans
  # produced by the lexer. The lexer state is also stored with the line so the
  # lexer can easily be resumed when the line changes without scanning down the
  # whole document. Lexing can also stop without scanning down the entire file
  # if the lexer state becomes the same again.
  class Line {
    const text string
    var advanceWidth = INVALID_ADVANCE_WIDTH
    var previousState LexerState = null
    var nextState LexerState = null
    var spans List<Span> = null
    var diagnostics List<Diagnostic> = null
    var hasErrors = false

    def isWordBoundary(index int, direction Direction) bool {
      var count = text.count
      assert(index >= 0 && index <= count)
      if index == 0 { return direction == .PREVIOUS }
      if index == count { return direction != .PREVIOUS }
      var left = classify(text[index - 1])
      var right = classify(text[index])
      return direction == .PREVIOUS ? left > right : left < right
    }

    def seekToBoundary(index int, direction Direction, step StepX) int {
      # Jump to the start or end of the line
      if step == .LINE {
        return direction == .PREVIOUS ? 0 : text.count
      }

      # Scan for the character or word boundary
      var iterator = Unicode.StringIterator.INSTANCE.reset(text, index)
      while true {
        var codePoint = direction == .PREVIOUS ? iterator.previousCodePoint : iterator.nextCodePoint
        if step == .CHARACTER || codePoint == -1 || isWordBoundary(iterator.index, direction) {
          return iterator.index
        }
      }
    }
  }

  namespace Line {
    def classify(c int) CharacterClass {
      if Lexer.isSpace(c) { return .SPACE }
      if Lexer.isAlphaOrDigit(c) { return .WORD }
      return .OTHER
    }

    def split(text string) List<Line> {
      var lines List<Line> = []
      for part in text.split("\n") {
        lines.append(Line.new(part))
      }
      return lines
    }

    def join(lines List<Line>) string {
      var text = ""
      for i in 0..lines.count {
        if i != 0 {
          text += "\n"
        }
        text += lines[i].text
      }
      return text
    }

    def maxAdvanceWidth(lines List<Line>) double {
      var result = 0.0
      for line in lines {
        assert(line.advanceWidth != INVALID_ADVANCE_WIDTH)
        result = Math.max(result, line.advanceWidth)
      }
      return result
    }
  }

  # This is the storage object for a document. It provides access to an ordered
  # collection of lines and tracks the maximum line advance width, which is
  # useful for scroll bounds. Each model object contains one line buffer. This
  # should probably be implemented using a gap buffer at some point for performance.
  class LineBuffer {
    var _lines = [Line.new("")]
    var _maxAdvanceWidth = 0.0

    def new {
      _lines[0].advanceWidth = 0
    }

    def toString string {
      return Line.join(_lines)
    }

    def count int {
      return _lines.count
    }

    def [](index int) Line {
      assert(0 <= index && index < count)
      return _lines[index]
    }

    def slice(start int, end int) List<Line> {
      assert(0 <= start && start <= end && end <= count)
      return _lines.slice(start, end)
    }

    def changeLines(start int, end int, lines List<Line>) {
      assert(lines.all(line => line.advanceWidth != INVALID_ADVANCE_WIDTH))

      # Invalidate the maximum advance width
      if _maxAdvanceWidth != INVALID_ADVANCE_WIDTH {
        var size = Line.maxAdvanceWidth(lines)
        if size > _maxAdvanceWidth {
          _maxAdvanceWidth = size
        } else if Line.maxAdvanceWidth(_lines.slice(start, end)) == _maxAdvanceWidth {
          _maxAdvanceWidth = INVALID_ADVANCE_WIDTH
        }
      }

      # Replace all lines in the range [start, end)
      _lines.removeRange(start, end)
      _lines.insert(start, lines) # TODO: This is O(n^2)
    }

    def maxAdvanceWidth double {
      if _maxAdvanceWidth == INVALID_ADVANCE_WIDTH {
        _maxAdvanceWidth = Line.maxAdvanceWidth(_lines)
      }
      return _maxAdvanceWidth
    }

    def clearStyleState {
      for line in _lines {
        line.previousState = null
        line.nextState = null
        line.spans = null
      }
    }

    def replaceDiagnostics(diagnostics IntMap<List<Diagnostic>>) {
      for i in 0.._lines.count {
        var line = _lines[i]
        var values = diagnostics.get(i, null)

        line.diagnostics = values
        line.hasErrors = false

        if values != null {
          for value in values {
            if value.kind == .ERROR {
              line.hasErrors = true
              break
            }
          }
        }
      }
    }
  }
}
